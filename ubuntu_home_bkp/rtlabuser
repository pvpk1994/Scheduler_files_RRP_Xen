#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<inttypes.h>
#include<unistd.h>
#define MILLION  1000000.0;
#define THOUSAND 1000.0;

//keep the CPU run for wcet milliseconds.
void execute(double wcet)
{
	struct timespec start;
	clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &start);
	while(1)
	{
		struct timespec end;
		clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &end);
		double interval = (end.tv_sec - start.tv_sec)*THOUSAND;
		interval += (end.tv_nsec - start.tv_nsec)/MILLION;
		if(interval>=wcet)
			break;
	}
}



int main(int argc, char *argv[])
{
	if(argc<3)
	{
		printf("Usage: The first parameter is the density and the second parameter is the WCET (ms).\n");
		return 0;
	}
	double density = atof(argv[1]);
	uint64_t wcet = atof(argv[2]);
	uint64_t phase = 1;
	uint64_t ddl = wcet / density;
	struct timespec start_time;
	clock_gettime(CLOCK_REALTIME, &start_time);
	while(1)
	{
		execute(wcet);
		struct timespec end_time;
		//clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &end_time);
		clock_gettime(CLOCK_REALTIME, &end_time);
		uint64_t interval = (end_time.tv_sec - start_time.tv_sec)*THOUSAND;
		interval += (end_time.tv_nsec - start_time.tv_nsec)/MILLION;
		//uint64_t interval = end_time.tv_sec*THOUSAND;
		//interval += (end_time.tv_nsec)/MILLION;
		if(interval>ddl*phase)
			printf("Job %d fails to meet the deadline %lu while it ends at %lu.\n", phase, ddl*phase, interval);
		else
			printf("Job %d meets its deadline %lu and it ends at %lu.\n", phase, ddl*phase, interval);
		phase++;
		fflush(stdout);
	}


}
